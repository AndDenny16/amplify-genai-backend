service: vu-amplify-object-access


frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function

custom:
  pythonRequirements:
    dockerizePip: non-linux
    layer: true

  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.10
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256

  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}  
  
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    MIN_ACU: ${self:custom.stageVariables.MIN_ACU}
    MAX_ACU: ${self:custom.stageVariables.MAX_ACU}
    VPC_ID: ${self:custom.stageVariables.VPC_ID}
    PRIVATE_SUBNET_ONE: ${self:custom.stageVariables.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.stageVariables.PRIVATE_SUBNET_TWO}
    VPC_CIDR: ${self:custom.stageVariables.VPC_CIDR}
    SES_SECRET_NAME: aws/ses/credentials
    SENDER_EMAIL: ${self:custom.stageVariables.SENDER_EMAIL}
    COGNITO_USER_POOL_ID: ${self:custom.stageVariables.COGNITO_USER_POOL_ID}
    REST_API_ID: ${self:custom.stageVariables.REST_API_ID}
    REST_API_ROOT_RESOURCE_ID: ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}
    USER_FILES_TABLE: vu-amplify-${sls:stage}-user-files
    OBJECT_ACCESS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-object-access


            

functions:

  share_src_ids:
    runtime: python3.10
    handler: perm_share.share_src_ids
    layers:
      - Ref: PythonRequirementsLambdaLayer

    timeout: 300
    events:
      - http:
          path: /utilities/object-acess
          method: post
          cors: true
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    COGNITO_USER_POOL_ID: ${self:custom.stageVariables.COGNITO_USER_POOL_ID}
    REST_API_ID: ${self:custom.stageVariables.REST_API_ID}
    REST_API_ROOT_RESOURCE_ID: ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}
    OBJECT_ACCESS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-object-access

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - s3:GetObject  # for accessing S3
            - s3:ListBucket # for listing objects in S3
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem

          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:514391678313:table/${self:service}-${sls:stage}-object-access"          



resources:
  Conditions:
    IsProd:
      'Fn::Equals':
        - ${self:provider.stage}
        - 'prod'

  Resources:
    ObjectAccessTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.OBJECT_ACCESS_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: 'object_id'
            AttributeType: 'S'
          - AttributeName: 'principle_id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'object_id'
            KeyType: 'HASH'  # Partition key
        GlobalSecondaryIndexes:
          - IndexName: 'PrincipleIdIndex'
            KeySchema:
              - AttributeName: 'principle_id'
                KeyType: 'HASH'  # Partition key for the secondary index
            Projection:
              ProjectionType: 'ALL' 
        