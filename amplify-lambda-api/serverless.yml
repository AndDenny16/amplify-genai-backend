service: vu-amplify-api

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}    
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    API_KEYS_DYNAMODB_TABLE: vu-amplify-object-access-${sls:stage}-api-keys
    ACCOUNTS_DYNAMO_TABLE: vu-amplify-${sls:stage}-accounts
    COGNITO_USERS_TABLE:  vu-amplify-object-access-${sls:stage}-cognito-users
    S3_API_DOCUMENTATION_BUCKET: ${self:service}-${sls:stage}-documentation-bucket


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - s3:GetObject
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COGNITO_USERS_TABLE}"
            - "arn:aws:s3:::${self:provider.environment.S3_API_DOCUMENTATION_BUCKET}/"
            - "arn:aws:s3:::${self:provider.environment.S3_API_DOCUMENTATION_BUCKET}/*"

functions:

  get_api_keys:
    handler: service/core.get_api_keys_for_user
    events:
      - http:
          path: apiKeys/get_keys
          method: get
          cors: true

  get_api_key:
    handler: service/core.get_api_key
    events:
      - http:
          path: apiKeys/get_key
          method: get
          cors: true

  create_api_keys:
    handler: service/core.create_api_keys
    events:
      - http:
          path: apiKeys/create_keys
          method: post
          cors: true

  update_api_key:
    handler: service/core.update_api_keys_for_user
    events:
      - http:
          path: apiKeys/update_keys
          method: post
          cors: true
      
  deactivate_key:
    handler: service/core.deactivate_key
    events:
      - http:
          path: apiKeys/deactivate_key
          method: post
          cors: true

  get_system_ids:
    handler: service/core.get_system_ids
    events:
      - http:
          path: apiKeys/get_system_ids
          method: get
          cors: true

  get_api_doc:
    handler: service/core.get_documentation
    events:
      - http:
          path: apiKeys/api_documentation
          method: get
          cors: true


resources:
  Resources:
    APIDocumentBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
          BucketName: ${self:provider.environment.S3_API_DOCUMENTATION_BUCKET}
          CorsConfiguration:
            CorsRules:
              - AllowedOrigins: ['*']
                AllowedMethods: ['GET']
                AllowedHeaders: ['*']
                MaxAge: 3000     
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256        
