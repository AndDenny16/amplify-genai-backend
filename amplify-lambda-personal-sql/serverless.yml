service: vu-amplify-lambda-personal-sql

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    PERSONAL_SQL_DYNAMO_TABLE: ${self:service}-${sls:stage}-personal-sql
    PERSONAL_SQL_S3_BUCKET: ${self:service}-${sls:stage}-personal-sql
    ASSISTANTS_FILES_BUCKET_NAME: ${self:custom.stageVariables.ASSISTANTS_FILES_BUCKET_NAME}

  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:DescribeTable
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PERSONAL_SQL_DYNAMO_TABLE}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.PERSONAL_SQL_S3_BUCKET}"
            - "arn:aws:s3:::${self:provider.environment.PERSONAL_SQL_S3_BUCKET}/*"
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.ASSISTANTS_FILES_BUCKET_NAME}/*"

functions:

  sql_db_describe:
    handler: service/core.describe_personal_db_schemas
    timeout: 30
    events:
      - http:
          path: pdb/sql/schema
          method: post
          cors: true

resources:
  Resources:
    DistributedLocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PERSONAL_SQL_DYNAMO_TABLE}
        AttributeDefinitions:
          - AttributeName: ResourceId
            AttributeType: S
        KeySchema:
          - AttributeName: ResourceId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
           