service: amplify-${self:custom.stageVars.DEP_NAME}-chat-billing

frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket

custom:
  pythonRequirements:
    dockerizePip: non-linux
    layer: true
  serverless-offline: 
    custom:
      config: ${file(../var/${self:provider.stage}-var.yml)}

  stageVars: ${file(../var/${self:provider.stage}-var.yml)}
  stages:
    - dev
    - staging
    - prod

  prune:
    automatic: true
    includeLayers: true
    number: 5    

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"
  
  environment:
    MODEL_EXCHANGE_RATE_TABLE: ${self:service}-${sls:stage}-model-exchange-rates
    BILLING_TABLE: ${self:service}-${sls:stage}-billing
    USAGE_PER_ID_TABLE: ${self:service}-${sls:stage}-usage-per-id # TODO: Remove this
    HISTORY_USAGE_TABLE: ${self:service}-${sls:stage}-history-usage

  iam:
    role:
      statements:
        - Effect: Allow # TODO: remove this
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - "arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:log-stream:*"
        - Effect: Allow # TODO: remove this
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            Fn::ImportValue: "${self:provider.stage}-AccountingChatUsageDynamoStreamArn"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:CreateTable
          Resource:
            - "arn:aws:secretsmanager:us-east-1:*:secret:aws/ses/credentials-i82Vzw"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MODEL_EXCHANGE_RATE_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MODEL_EXCHANGE_RATE_TABLE}/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BILLING_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BILLING_TABLE}/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USAGE_PER_ID_TABLE}" # TODO: remove this
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USAGE_PER_ID_TABLE}/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_USAGE_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_USAGE_TABLE}/*"


functions:
  # sets the value of the model exchange rates
  # TODO:
  # - finish implementation of AWS pricing API
  # - make this trigger daily
  updateModelRateTable:
    runtime: python3.11
    handler: exchange_rates/update_table.updateModelExchangeRateTable
    events:
      - http:
          path: billing/update-model-exchange-rates
          method: post
          cors: true
    environment:
      EXCHANGE_RATE_TABLE: ${self:provider.environment.MODEL_EXCHANGE_RATE_TABLE}

  # TODO: remove this stream
  # handles the stream from chat-usage table to billing table
  processChatUsageStream:
    handler: usage/stream_table.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::ImportValue: "${self:provider.stage}-AccountingChatUsageDynamoStreamArn"
          batchSize: 10
          startingPosition: LATEST
    environment:
      DESTINATION_TABLE: ${self:provider.environment.BILLING_TABLE}
  
  # calculates cost of usage for each action
  # TODO: make this trigger at the end of each day and month, NOT on insert
  #       this should also save everything to history table
  trackUsage:
    handler: usage/track_usage.handler
    memorySize: 128
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [BillingTable, StreamArn]
          batchSize: 10
          startingPosition: LATEST
    environment:
      MODEL_EXCHANGE_RATE_TABLE: ${self:provider.environment.MODEL_EXCHANGE_RATE_TABLE}
      USAGE_PER_ID_TABLE: ${self:provider.environment.USAGE_PER_ID_TABLE}
  
  # TODO: remove this
  # saves daily and monthly usage to history table
  resetAndRecordUsage:
    handler: usage/reset_and_record.handler
    events:
      - schedule:
          rate: cron(0 0 * * ? *) # Daily at midnight UTC
          input:
            type: dailyReset
      - schedule:
          rate: cron(0 0 1 * ? *) # Monthly on the first day of the month at midnight UTC
          input:
            type: monthlyReset
    environment:
      HISTORY_USAGE_TABLE: ${self:provider.environment.HISTORY_USAGE_TABLE}
      USAGE_PER_ID_TABLE: ${self:provider.environment.USAGE_PER_ID_TABLE}
  
  # TODO: add real time report generator

resources:
  Resources:
    # contains values for cost calculations for each model
    ExchangeRateTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MODEL_EXCHANGE_RATE_TABLE}
        AttributeDefinitions:
          - AttributeName: 'ModelID'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'ModelID'
            KeyType: 'HASH'

    # TODO: this table should only contain code interpreter items
    #       in the future this may contain lambda, assistant, and infrastructure items
    # chat-usage table streamed to this table along with itemType
    BillingTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.BILLING_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'user'
            AttributeType: 'S'
          - AttributeName: 'time'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        GlobalSecondaryIndexes:
          - IndexName: 'UserTimeIndex'
            KeySchema:
              - AttributeName: 'user'
                KeyType: 'HASH'
              - AttributeName: 'time'
                KeyType: 'RANGE'
            Projection:
              ProjectionType: 'ALL'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    
    # TODO: remove this
    # cost for each action saved to each user
    UsagePerIdTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.USAGE_PER_ID_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'user'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'user'
            KeyType: 'RANGE'

    # daily and monthly usage saved to this table
    HistoryUsageTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.HISTORY_USAGE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'userDateComposite'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'userDateComposite'
            KeyType: 'RANGE'