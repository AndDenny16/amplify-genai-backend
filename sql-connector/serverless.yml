

service: sql-connector

frameworkVersion: '3'
package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
custom:

  pythonRequirements:
    dockerizePip: non-linux
  
  stages:
    - dev
    - staging
    - prod

  environments:
    dev:
      OAUTH_AUDIENCE: "https://lambda.vanderbilt.ai"
      OAUTH_ISSUER_BASE_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_aeCY16Uey"
      MIN_ACU: 2
      MAX_ACU: 16
      VPC_ID: "vpc-09c9aa4f02b2b281c"
      PRIVATE_SUBNET_ONE: "subnet-08368ed27f5da4715"
      PRIVATE_SUBNET_TWO: "subnet-026e671b7c33b3256"
      VPC_CIDR: '10.55.95.0/24'
      API_ID: "oaxwb16vc7"
    staging:
      OAUTH_AUDIENCE: "https://lambda.vanderbilt.ai"
      OAUTH_ISSUER_BASE_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_aeCY16Uey"
      MIN_ACU: 4
      MAX_ACU: 16
      VPC_ID: "vpc-09c9aa4f02b2b281c"
      PRIVATE_SUBNET_ONE: "subnet-08368ed27f5da4715"
      PRIVATE_SUBNET_TWO: "subnet-026e671b7c33b3256" 
      VPC_CIDR: '10.55.95.0/24'
      API_ID: "ytid3goff4"
    prod:
      OAUTH_AUDIENCE: "https://lambda.vanderbilt.ai"
      OAUTH_ISSUER_BASE_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_nJhUidTKk"
      MIN_ACU: 8
      MAX_ACU: 32
      VPC_ID: "vpc-09c9aa4f02b2b281c"
      PRIVATE_SUBNET_ONE: "subnet-08368ed27f5da4715"
      PRIVATE_SUBNET_TWO: "subnet-026e671b7c33b3256" 
      VPC_CIDR: '10.55.95.0/24'
      API_ID: "mexle8320g"

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  environment:
    MIN_ACU: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.MIN_ACU}
    MAX_ACU: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.MAX_ACU}
    VPC_ID: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.VPC_ID}
    PRIVATE_SUBNET_ONE: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.PRIVATE_SUBNET_TWO}
    VPC_CIDR: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.VPC_CIDR}
    MY_SQL_DB_CLUSTER: ${sls:stage}-mysql-cluster
    MY_SQL_DB_NAME: AmplifyMySQL_${sls:stage}
    MY_SQL_DB_SECRET: ${self:service}-${sls:stage}-mysql-postgres-db-secret
    MY_SQL_DB_USERNAME: mysqladmin_${sls:stage}
    MY_SQL_WRITE_ENDPOINT: ${self:service}-${self:provider.stage}-MySQLDbClusterWriteEndpoint
    MY_SQL_READ_ENDPOINT: ${self:service}-${self:provider.stage}-MySQLDbClusterReadEndpoint
    SES_SECRET_ARN: aws/ses/credentials-i82Vzw
    OPENAI_API_KEY_ARN: arn:aws:secretsmanager:us-east-1:514391678313:secret:OPENAI_API_KEY-REUULJ  


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - sqs:DeleteMessage
            - rds-data:ExecuteStatement
            - rds-data:BatchExecuteStatement
            - rds-data:BeginTransaction
            - rds-data:CommitTransaction
            - rds-data:RollbackTransaction
          Resource:
            - !GetAtt MySQLDbCluster.DBClusterArn
            - !Ref MySQLDbSecret
functions:
  hello:
    handler: handler.hello
    vpc: ${self:provider.environment.VPC_ID}
           
resources:
  Resources:
    MySQLDbCluster:
      DependsOn: MySQLDbSecurityGroup
      DeletionPolicy: Snapshot
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: ${self:provider.environment.MY_SQL_DB_NAME}
        DBClusterIdentifier: ${self:provider.environment.MY_SQL_DB_CLUSTER}
        Engine: aurora-mysql # Change the engine to Aurora MySQL
        EngineVersion: '8.0.mysql_aurora.3.04.1' # Specify a compatible engine version for Aurora MySQL
        ServerlessV2ScalingConfiguration: # This is a new property for Serverless v2
          MinCapacity: ${self:provider.environment.MIN_ACU}
          MaxCapacity: ${self:provider.environment.MAX_ACU}
        EnableCloudwatchLogsExports:
          - audit # Change log exports to MySQL-compatible logs if needed
          - error
          - general
          - slowquery
        MasterUsername: ${self:provider.environment.MY_SQL_DB_USERNAME}
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${MySQLDbSecret}:SecretString::}}'
        VpcSecurityGroupIds:
          - !Ref MySQLDbSecurityGroup
        DBSubnetGroupName: !Ref MySQLDbSubnetGroup
        BackupRetentionPeriod: 7

    MySQLDbInstance1:
          Type: 'AWS::RDS::DBInstance'
          Properties:
            Engine: aurora-mysql
            DBInstanceClass: db.serverless
            DBClusterIdentifier: !Ref MySQLDbCluster


    MySQLDbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for RDS Aurora Serverless MySQL Database"
        SubnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}

    MySQLDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for RDS Aurora Serverless"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: ${self:provider.environment.VPC_CIDR}
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: '10.2.224.0/20'

    MySQLDbSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${sls:stage}/mysql/db-creds
        Description: "Credentials for Aurora Serverless MySQL Database"
        GenerateSecretString:
          PasswordLength: 16
          ExcludeCharacters: "\"@/\\"