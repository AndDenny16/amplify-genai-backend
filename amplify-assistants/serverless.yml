service: vu-amplify-assistants

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin


custom:
  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod
  pythonRequirements:
    dockerizePip: non-linux
    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  logs:
    httpApi: true
    restApi: true
    websocket: true
  logRetentionInDays: 365  
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    # When using the OpenAI API, you need to provide the ARN of the secret that contains the API key
    # The secret should be named OPENAI_API_KEY
    OPENAI_API_KEY_ARN: ${self:custom.stageVariables.OPENAI_API_KEY_ARN}
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    LLM_ENDPOINTS_SECRETS_NAME: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME}
    # Valid values are either "openai" or "azure"
    HASH_FILES_DYNAMO_TABLE: vu-amplify-${sls:stage}-hash-files
    ASSISTANTS_OPENAI_PROVIDER: ${self:custom.stageVariables.ASSISTANTS_OPENAI_PROVIDER}
    ASSISTANTS_FILES_BUCKET_NAME: ${self:custom.stageVariables.ASSISTANTS_FILES_BUCKET_NAME}
    ASSISTANTS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistants
    ASSISTANTS_ALIASES_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistant-aliases
    ASSISTANT_THREADS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistant-threads
    ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistant-thread-runs
    ASSISTANTS_CODE_INTERPRETER_FILES_BUCKET_NAME: ${self:service}-${sls:stage}-code-interpreter-files
    ASSISTANT_CODE_INTERPRETER_DYNAMODB_TABLE: ${self:service}-${sls:stage}-code-interpreter-assistants
    BILLING_DYNAMODB_TABLE: chat-billing-${sls:stage}-additional-charges
    COST_CALCULATIONS_DYNAMO_TABLE: vu-amplify-${sls:stage}-cost-calculations
    S3_RAG_CHUNKS_BUCKET_NAME: ${self:custom.stageVariables.S3_RAG_CHUNKS_BUCKET_NAME}
    S3_SHARE_BUCKET_NAME: vu-amplify-${sls:stage}-share
    SHARES_DYNAMODB_TABLE: vu-amplify-${sls:stage}
    ACCOUNTS_DYNAMO_TABLE: vu-amplify-${sls:stage}-accounts
    API_KEYS_DYNAMODB_TABLE: vu-amplify-object-access-${sls:stage}-api-keys
    OBJECT_ACCESS_DYNAMODB_TABLE: vu-amplify-object-access-${sls:stage}-object-access
    API_BASE_URL: ${self:custom.stageVariables.API_BASE_URL}
    ASSISTANTS_API_BASE_URL: ${self:custom.stageVariables.ASSISTANTS_API_BASE_URL}
    # needed for system assistant url 
    ASSISTANTS_CHAT_CODE_INTERPRETER_ENDPOINT: ${self:custom.stageVariables.ASSISTANTS_CHAT_CODE_INTERPRETER_ENDPOINT}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - s3:GetObject
            - s3:PutObject
            - s3:HeadObject
            - s3:ListBucket
          Resource:
            - "${self:provider.environment.OPENAI_API_KEY_ARN}"
            - "${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OBJECT_ACCESS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.SHARES_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_CODE_INTERPRETER_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.BILLING_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREADS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREADS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
            - "arn:aws:s3:::${self:provider.environment.ASSISTANTS_CODE_INTERPRETER_FILES_BUCKET_NAME}/*"
            - "arn:aws:s3:::${self:provider.environment.ASSISTANTS_FILES_BUCKET_NAME}/*"
            

        - Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource: 
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HASH_FILES_DYNAMO_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HASH_FILES_DYNAMO_TABLE}/index/*"
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.S3_RAG_CHUNKS_BUCKET_NAME}/assistants/*"
            - "arn:aws:s3:::${self:provider.environment.S3_SHARE_BUCKET_NAME}"

functions:

  remove_astp_perms:
    handler: service/core.remove_shared_ast_permissions
    timeout: 30
    events:
      - http:
          path: assistant/remove_astp_permissions
          method: post
          cors: true

  create_assistant:
    handler: service/core.create_assistant
    timeout: 30
    events:
      - http:
          path: assistant/create
          method: post
          cors: true

  list_assistants:
    handler: service/core.list_assistants
    timeout: 30
    events:
      - http:
          path: assistant/list
          method: get
          cors: true

  share_assistant:
    handler: service/core.share_assistant
    timeout: 30
    events:
      - http:
          path: assistant/share
          method: post
          cors: true

  delete_assistant:
    handler: service/core.delete_assistant
    events:
      - http:
          path: assistant/delete
          method: post
          cors: true
    
  download_code_interpreter_file:
    handler: openaiazure/assistant.get_presigned_url_code_interpreter
    events:
      - http:
          path: assistant/files/download/codeinterpreter
          method: post
          cors: true


  # This endpoint is mainly for local testing but doesn't have
  # a long enough timeout for use when running in AWS behind API Gateway
  create_code_interpreter_assistant:
    handler: openaiazure/assistant.create_code_interpreter_assistant 
    timeout: 30
    events:
      - http:
          path: assistant/create/codeinterpreter
          method: post
          cors: true
  
  chat_code_interpreter_assistant:
    handler: openaiazure/assistant.chat_with_code_interpreter
    timeout: 30

    events:
      - http:
          path: assistant/chat_with_code_interpreter
          method: post
          cors: true

  chat_code_interpreter_assistant_url: 
    handler: openaiazure/assistant.chat_with_code_interpreter
    timeout: 420 # 7 min
    url: true
    

  delete_assistant_thread:
    handler: openaiazure/assistant.delete_assistant_thread
    events:
      - http:
          path: assistant/openai/thread/delete
          method: delete
          cors: true


  delete_assistant_open_ai:
    handler: openaiazure/assistant.delete_assistant
    events:
      - http:
          path: assistant/openai/delete
          method: delete
          cors: true



resources:
  Resources:

    AssistantsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
          -
            AttributeName: assistantId
            AttributeType: S
          -
            AttributeName: version
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH

            Projection:
              ProjectionType: ALL
          -
            IndexName: UserNameIndex
            KeySchema:
              - AttributeName: user
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE

            Projection:
              ProjectionType: ALL
          -
            IndexName: AssistantIdIndex
            KeySchema:
              - AttributeName: assistantId
                KeyType: HASH
              - AttributeName: version
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}

    AssistantsAliasesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: assistantId
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          -
            AttributeName: user
            KeyType: HASH
          -
            AttributeName: assistantId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: AssistantIdIndex
            KeySchema:
              -
                AttributeName: assistantId
                KeyType: HASH
              -
                AttributeName: user
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH
              -
                AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}

    AssistantThreadsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          -
            IndexName: UserNameIndex
            KeySchema:
              - AttributeName: user
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANT_THREADS_DYNAMODB_TABLE}
        
    AssistantThreadRunsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S

        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE}

    AssistantCodeInterpreterDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S

        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANT_CODE_INTERPRETER_DYNAMODB_TABLE}

    AssistantsFilesBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.ASSISTANTS_CODE_INTERPRETER_FILES_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins: ['*']
              AllowedMethods: ['GET']
              AllowedHeaders: ['*']
              MaxAge: 3000     
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256