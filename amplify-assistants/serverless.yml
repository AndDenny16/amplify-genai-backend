service: vu-amplify-assistants

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    # When using the OpenAI API, you need to provide the ARN of the secret that contains the API key
    # The secret should be named OPENAI_API_KEY
    OPENAI_API_KEY_ARN: ${self:custom.stageVariables.OPENAI_API_KEY_ARN}
    # Valid values are either "openai" or "azure"
    ASSISTANTS_OPENAI_PROVIDER: ${self:custom.stageVariables.ASSISTANTS_OPENAI_PROVIDER}
    ASSISTANTS_FILES_BUCKET_NAME: ${self:custom.stageVariables.ASSISTANTS_FILES_BUCKET_NAME}
    ASSISTANTS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistants
    ASSISTANT_THREADS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistant-threads
    ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-assistant-thread-runs

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - s3:GetObject
            - s3:PutObject
            - s3:HeadObject
            - s3:ListBucket
          Resource:
            - "${self:provider.environment.OPENAI_API_KEY_ARN}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREADS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREADS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE}/index/*"

functions:

  create_assistant:
    handler: openaiazure/assistant.create_assistant
    timeout: 30
    events:
      - http:
          path: assistant/create
          method: post
          cors: true

  delete_assistant:
    handler: openaiazure/assistant.delete_assistant
    events:
      - http:
          path: assistant/delete
          method: post
          cors: true

  add_message_assistant_thread:
    handler: openaiazure/assistant.add_message_assistant_thread
    timeout: 30
    events:
      - http:
          path: assistant/thread/message/create
          method: post
          cors: true

  get_messages_assistant_thread:
    handler: openaiazure/assistant.get_messages_assistant_thread
    events:
      - http:
          path: assistant/thread/message/list
          method: post
          cors: true

  # This endpoint is mainly for local testing but doesn't have
  # a long enough timeout for use when running in AWS behind API Gateway
  chat_assistant:
    handler: openaiazure/assistant.chat_with_assistant
    timeout: 30

    events:
      - http:
          path: assistant/chat
          method: post
          cors: true

  chat_assistant_url:
    handler: openaiazure/assistant.chat_with_assistant
    timeout: 900
    url:
      cors: true

  run_assistant_thread:
    handler: openaiazure/assistant.run_assistant_thread
    events:
      - http:
          path: assistant/thread/run
          method: post
          cors: true

  run_status_assistant_thread:
    handler: openaiazure/assistant.get_run_status_assistant_thread
    events:
      - http:
          path: assistant/thread/run/status
          method: post
          cors: true

  list_assistants:
    handler: openaiazure/assistant.list_assistants
    events:
      - http:
          path: assistant/list
          method: post
          cors: true

  create_assistant_thread:
    handler: openaiazure/assistant.create_assistant_thread
    events:
      - http:
          path: assistant/thread/create
          method: post
          cors: true

  delete_assistant_thread:
    handler: openaiazure/assistant.delete_assistant_thread
    events:
      - http:
          path: assistant/thread/delete
          method: post
          cors: true


resources:
  Resources:

    AssistantsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH

            Projection:
              ProjectionType: ALL
          -
            IndexName: UserNameIndex
            KeySchema:
              - AttributeName: user
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE

            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}

    AssistantThreadsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          -
            IndexName: UserNameIndex
            KeySchema:
              - AttributeName: user
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANT_THREADS_DYNAMODB_TABLE}
        
    AssistantThreadRunsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S

        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: UserIndex
            KeySchema:
              -
                AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.ASSISTANT_THREAD_RUNS_DYNAMODB_TABLE}