service: embedding

frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket 
  - serverless-iam-roles-per-function
  
custom:
  pythonRequirements:
    dockerizePip: non-linux
    layer: true

  prune:
    automatic: true
    includeLayers: true
    number: 5           

  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  
  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.10
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}  
  
  environment:
    #Local Resources Created
    RAG_POSTGRES_DB_CLUSTER: ${sls:stage}-rag-cluster
    RAG_POSTGRES_DB_NAME: RagVectorDb_${sls:stage}
    RAG_POSTGRES_DB_SECRET: ${sls:stage}/rag/postgres/db-creds-2
    RAG_POSTGRES_DB_USERNAME: ragadmin_${sls:stage}
    RAG_POSTGRES_DB_WRITE_ENDPOINT: !GetAtt RagPostgresDbCluster.Endpoint.Address
    RAG_POSTGRES_DB_READ_ENDPOINT: !GetAtt RagPostgresDbCluster.ReadEndpoint.Address
    EMBEDDING_PROGRESS_TABLE: amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-embedding-progress
    EMBEDDING_CHUNKS_INDEX_QUEUE: amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-embedding-chunks-index-queue
    OBJECT_ACCESS_TABLE: amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-object-access-table

    #Reference Resource createb by other services   
    S3_RAG_CHUNKS_BUCKET: amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-rag-chunks
    
    #Stand Alone Vars Referenced from local vars file
    API_VERSION: ${self:custom.stageVariables.API_VERSION}
    AWS_ACCOUNT_ID: ${self:custom.stageVariables.AWS_ACCOUNT_ID}
    COGNITO_USER_POOL_ID: ${self:custom.stageVariables.COGNITO_USER_POOL_ID}
    EMBEDDING_MODEL_NAME: ${self:custom.stageVariables.EMBEDDING_MODEL_NAME}
    ENDPOINTS_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    KEYWORD_MODEL_NAME: ${self:custom.stageVariables.KEYWORD_MODEL_NAME}
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    MAX_ACU: ${self:custom.stageVariables.MAX_ACU}
    MIN_ACU: ${self:custom.stageVariables.MIN_ACU}
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    PRIVATE_SUBNET_ONE: ${self:custom.stageVariables.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.stageVariables.PRIVATE_SUBNET_TWO}
    QA_MODEL_NAME: ${self:custom.stageVariables.QA_MODEL_NAME}
    REST_API_ID: ${self:custom.stageVariables.REST_API_ID}
    REST_API_ROOT_RESOURCE_ID: ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}
    VPC_CIDR: ${self:custom.stageVariables.VPC_CIDR}
    VPC_ID: ${self:custom.stageVariables.VPC_ID}
    HOSTED_ZONE_ID: ${self:custom.stageVariables.HOSTED_ZONE_ID}
    RDS_HOSTED_ZONE_ID: ${self:custom.stageVariables.RDS_HOSTED_ZONE_ID}
    READ_POSTGRES_DOMAIN_NAME: ${self:custom.stageVariables.READ_POSTGRES_DOMAIN_NAME}
    WRITE_POSTGRES_DOMAIN_NAME: ${self:custom.stageVariables.WRITE_POSTGRES_DOMAIN_NAME}

   

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - s3:GetObject  # for accessing S3
            - s3:ListBucket # for listing objects in S3
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - sqs:SendMessage

          Resource:
            - "arn:aws:secretsmanager:us-east-1:*:secret:aws/ses/credentials-i82Vzw"
            - "arn:aws:secretsmanager:us-east-1:*:secret:aws/ses/credentials-i82Vzw"
            - "arn:aws:secretsmanager:us-east-1:*:secret:openai-endpoints-2O6UlC"
            - "arn:aws:s3:::amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-rag-chunks/*"
            - !GetAtt RagPostgresDbCluster.DBClusterArn
            - !Ref RagPostgresDbSecret
            - "arn:aws:dynamodb:${self:provider.region}:*:table/amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-user-files"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-embedding-progress"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-object-access-table"
            - "arn:aws:sqs:${self:provider.region}:*:amplify-${self:custom.stageVariables.DEPLOYMENT_NAME}-${sls:stage}-embedding-chunks-index-queue"
            

functions:

  queue_document_for_embedding:
      runtime: python3.10
      handler: embedding-sqs.queue_document_for_embedding
      layers:
        - Ref: PythonRequirementsLambdaLayer
      events:
        - s3:
            bucket: ${self:provider.environment.S3_RAG_CHUNKS_BUCKET}
            event: s3:ObjectCreated:*
            existing: true
      environment:
          EMBEDDING_CHUNKS_INDEX_QUEUE:
            Ref: EmbeddingChunksIndexQueue
         

  process_chunk_for_embedding:
      runtime: python3.10
      layers:
        - Ref: PythonRequirementsLambdaLayer
      handler: embedding.lambda_handler
      dependsOn:
      - RagPostgresDbCluster
      reservedConcurrency: 200
      vpc: 
        securityGroupIds:
          - !Ref LambdaSecurityGroup
        subnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}
      timeout: 900
      events:
        - sqs:
            arn:
              Fn::GetAtt:
                - EmbeddingChunksIndexQueue
                - Arn
         

      environment:
        RAG_POSTGRES_DB_SECRET: ${sls:stage}/rag/postgres/db-creds-2
        MODEL_NAME:  ${self:provider.environment.EMBEDDING_MODEL_NAME}
        RAG_POSTGRES_DB_NAME: RagVectorDb_${sls:stage}
        RAG_POSTGRES_DB_USERNAME: ragadmin_${sls:stage}
        RAG_POSTGRES_DB_WRITE_ENDPOINT: !GetAtt RagPostgresDbCluster.Endpoint.Address
        ENDPOINTS_ARN: ${self:provider.environment.ENDPOINTS_ARN}
        EMBEDDING_MODEL_NAME: ${self:provider.environment.EMBEDDING_MODEL_NAME}
        KEYWORD_MODEL_NAME: ${self:provider.environment.KEYWORD_MODEL_NAME}
        QA_MODEL_NAME: ${self:provider.environment.QA_MODEL_NAME}
        API_VERSION: ${self:provider.environment.API_VERSION} 
        EMBEDDING_CHUNKS_INDEX_QUEUE: !Ref EmbeddingChunksIndexQueue   


  get_dual_embeddings:
    runtime: python3.10
    handler: embedding-dual-retrieval.process_input_with_dual_retrieval
    dependsOn:
      - RagPostgresDbCluster
    layers:
      - Ref: PythonRequirementsLambdaLayer
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}
    timeout: 300
    events:
      - http:
          path: /embedding-dual-retrieval
          method: post
          cors: true


resources:
  Conditions:
    IsProd:
      'Fn::Equals':
        - ${self:provider.stage}
        - 'prod'

  Resources:
    RagPostgresDbCluster:
      DependsOn: RagPostgresDbSecurityGroup
      DeletionPolicy: Snapshot
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: ${self:provider.environment.RAG_POSTGRES_DB_NAME}
        DBClusterIdentifier: ${self:provider.environment.RAG_POSTGRES_DB_CLUSTER}
        Engine: aurora-postgresql
        EngineVersion: '15.4' # Specify the compatible engine version for Serverless v2
        ServerlessV2ScalingConfiguration: # This is a new property for Serverless v2
          MinCapacity: ${self:provider.environment.MIN_ACU}
          MaxCapacity: ${self:provider.environment.MAX_ACU}
        EnableHttpEndpoint: true
        EnableCloudwatchLogsExports:
          - postgresql
        MasterUsername: ${self:provider.environment.RAG_POSTGRES_DB_USERNAME}
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${RagPostgresDbSecret}:SecretString::}}'
        VpcSecurityGroupIds:
          - !Ref RagPostgresDbSecurityGroup
        DBSubnetGroupName: !Ref RagPostgresDbSubnetGroup
        BackupRetentionPeriod: 7
        StorageEncrypted: true
        KmsKeyId: !Ref MyKmsKey # Replace with an actual KMS key if you have one, or create a new KMS key resource

    # If you need to create a new KMS key, add the following resource
    MyKmsKey:
      Type: 'AWS::KMS::Key'
      Properties:
        Description: "KMS key for RDS Aurora Serverless PostgreSQL database encryption"
        KeyPolicy:
          Version: "2012-10-17"
          Id: "key-default-policy"
          Statement:
            - 
              Sid: "Enable IAM User Permissions"
              Effect: "Allow"
              Principal:
                AWS: "arn:aws:iam::${self:provider.environment.AWS_ACCOUNT_ID}:root"
              Action: "kms:*"
              Resource: "*"

    RagPostgresDbInstance1:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RagPostgresDbCluster
        
    #Only create the second instance if the stage is prod
    RagPostgresDbInstance2:
      Type: 'AWS::RDS::DBInstance'
      Condition: IsProd
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RagPostgresDbCluster

    WriteEndpointDNSRecord:
      Type: 'AWS::Route53::RecordSet'
      Properties:
        HostedZoneId: ${self:provider.environment.HOSTED_ZONE_ID}
        Name: write.${self:provider.environment.WRITE_POSTGRES_DOMAIN_NAME}
        Type: A
        AliasTarget:
          HostedZoneId: ${self:provider.environment.RDS_HOSTED_ZONE_ID} # Use RDS Alias Hosted Zone ID for your region
          DNSName: !GetAtt RagPostgresDbCluster.Endpoint.Address
          EvaluateTargetHealth: false
    ReadEndpointDNSRecord:
      Type: 'AWS::Route53::RecordSet'
      Properties:
        HostedZoneId: ${self:provider.environment.HOSTED_ZONE_ID}
        Name: read.${self:provider.environment.READ_POSTGRES_DOMAIN_NAME}
        Type: A
        AliasTarget:
          HostedZoneId: ${self:provider.environment.RDS_HOSTED_ZONE_ID} # Use RDS Alias Hosted Zone ID for your region
          DNSName: !GetAtt RagPostgresDbCluster.ReadEndpoint.Address
          EvaluateTargetHealth: false

    RagPostgresDbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for RDS Aurora Serverless PostgreSQL Vector Database"
        SubnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}

    RagPostgresDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for RDS Aurora Serverless"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: ${self:provider.environment.VPC_CIDR}
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: '10.2.224.0/20'
    
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for  Lambda Functions"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0  
                 
    RagPostgresDbSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${sls:stage}/rag/postgres/db-creds-2
        Description: "Credentials for Aurora Serverless PostgreSQL Database"
        GenerateSecretString:
          PasswordLength: 16
          ExcludeCharacters: "\"@/\\" 

    EmbeddingProgressTable:
          Type: 'AWS::DynamoDB::Table'
          Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:provider.environment.EMBEDDING_PROGRESS_TABLE}
            AttributeDefinitions:
              - AttributeName: 'object_id'
                AttributeType: 'S'
            KeySchema:
              - AttributeName: 'object_id'
                KeyType: 'HASH'  # Partition key

    EmbeddingChunksIndexQueue:
          Type: "AWS::SQS::Queue"
          Properties:
            VisibilityTimeout: 900
            QueueName: ${self:provider.environment.EMBEDDING_CHUNKS_INDEX_QUEUE}           
    

        