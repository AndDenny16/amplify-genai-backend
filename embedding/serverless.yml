service: vu-amplify-embedding


frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
custom:
  pythonRequirements:
    dockerizePip: non-linux
    layer: true
  
  stages:
    - dev
    - staging
    - prod

  environments:
    dev:
      OAUTH_AUDIENCE: "https://lambda.vanderbilt.ai"
      OAUTH_ISSUER_BASE_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_aeCY16Uey"
      MIN_ACU: 2
      MAX_ACU: 16
      VPC_ID: "vpc-09c9aa4f02b2b281c"
      PRIVATE_SUBNET_ONE: "subnet-08368ed27f5da4715"
      PRIVATE_SUBNET_TWO: "subnet-026e671b7c33b3256"
      VPC_CIDR: '10.55.95.0/24'
      AMPLIFY_LAMBDA_SERVICE: 'vu-amplify-dev'
      API_ID: dev-vu-amplify
    staging:
      OAUTH_AUDIENCE: "https://lambda.vanderbilt.ai"
      OAUTH_ISSUER_BASE_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_aeCY16Uey"
      MIN_ACU: 4
      MAX_ACU: 16
      VPC_ID: "vpc-09c9aa4f02b2b281c"
      PRIVATE_SUBNET_ONE: "subnet-08368ed27f5da4715"
      PRIVATE_SUBNET_TWO: "subnet-026e671b7c33b3256" 
      VPC_CIDR: '10.55.95.0/24'
      AMPLIFY_LAMBDA_SERVICE: 'vu-amplify-staging'
      API_ID: ytid3goff4
    prod:
      OAUTH_AUDIENCE: "https://lambda.vanderbilt.ai"
      OAUTH_ISSUER_BASE_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_nJhUidTKk"
      MIN_ACU: 8
      MAX_ACU: 32
      VPC_ID: "vpc-09c9aa4f02b2b281c"
      PRIVATE_SUBNET_ONE: "subnet-08368ed27f5da4715"
      PRIVATE_SUBNET_TWO: "subnet-026e671b7c33b3256" 
      VPC_CIDR: '10.55.95.0/24'    
      AMPLIFY_LAMBDA_SERVICE: 'vu-amplify-prod'
      API_ID: mexle8320g

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: production

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  
  environment:
    ACCOUNTING_DYNAMO_TABLE: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.AMPLIFY_LAMBDA_SERVICE}-accounting
    CHAT_USAGE_DYNAMO_TABLE: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.AMPLIFY_LAMBDA_SERVICE}-chat-usage
    S3_RAG_CHUNKS_BUCKET_NAME: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.AMPLIFY_LAMBDA_SERVICE}-rag-chunks
    OAUTH_AUDIENCE: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.OAUTH_ISSUER_BASE_URL}
    MIN_ACU: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.MIN_ACU}
    MAX_ACU: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.MAX_ACU}
    VPC_ID: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.VPC_ID}
    PRIVATE_SUBNET_ONE: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.PRIVATE_SUBNET_TWO}
    VPC_CIDR: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.VPC_CIDR}
    RAG_POSTGRES_DB_CLUSTER: ${sls:stage}-rag-cluster
    RAG_POSTGRES_DB_NAME: RagVectorDb_${sls:stage}
    RAG_POSTGRES_DB_SECRET: ${self:service}-${sls:stage}-rag-postgres-db-secret
    RAG_POSTGRES_DB_USERNAME: ragadmin_${sls:stage}
    RAG_POSTGRES_WRITE_ENDPOINT: ${self:service}-${self:provider.stage}-RagPostgresDbClusterWriteEndpoint
    RAG_POSTGRES_READ_ENDPOINT: ${self:service}-${self:provider.stage}-RagPostgresDbClusterReadEndpoint
    SES_SECRET_ARN: aws/ses/credentials-i82Vzw
    OPENAI_API_KEY_ARN: arn:aws:secretsmanager:us-east-1:514391678313:secret:OPENAI_API_KEY-REUULJ  


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - s3:GetObject  # for accessing S3
            - s3:ListBucket # for listing objects in S3
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem

          Resource:
            - "arn:aws:secretsmanager:us-east-1:514391678313:secret:aws/ses/credentials-i82Vzw"
            - "arn:aws:secretsmanager:us-east-1:514391678313:secret:aws/ses/credentials-i82Vzw"
            - "arn:aws:secretsmanager:us-east-1:514391678313:secret:openai-endpoints-2O6UlC"
            - "arn:aws:s3:::${self:provider.environment.S3_RAG_CHUNKS_BUCKET_NAME}/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTING_DYNAMO_TABLE}"
            - !GetAtt RagPostgresDbCluster.DBClusterArn
            - !Ref RagPostgresDbSecret

functions:

  process_chunk_for_embedding:
    runtime: python3.10
    layers: 
      - arn:aws:lambda:us-east-1:514391678313:layer:pgvector:2
    handler: embedding.lambda_handler
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}
    timeout: 300
    events:
     - s3:
         bucket: ${self:custom.environments.${opt:stage, self:custom.defaultStage}.AMPLIFY_LAMBDA_SERVICE}-rag-chunks
         event: s3:ObjectCreated:*
         existing: true

  get_embeddingss:
    runtime: python3.10
    layers:
      - Ref: PythonRequirementsLambdaLayer       

    environment:
      RAG_POSTGRES_DB_SECRET: ${sls:stage}/rag/postgres/db-creds-2
      MODEL_NAME: 'text-embedding-ada-002'
      RAG_POSTGRES_DB_NAME: RagVectorDb_${sls:stage}
      RAG_POSTGRES_DB_USERNAME: ragadmin_${sls:stage}
      RAG_POSTGRES_DB_WRITE_ENDPOINT: !GetAtt RagPostgresDbCluster.Endpoint.Address
      SES_SECRET_ARN: 'arn:aws:secretsmanager:us-east-1:514391678313:secret:aws/ses/credentials-i82Vzw'
      SENDER_EMAIL: 'amplify@vanderbilt.edu'
      ENDPOINTS_ARN: 'arn:aws:secretsmanager:us-east-1:514391678313:secret:openai-endpoints-2O6UlC'
    

resources:
  Conditions:
    IsProd:
      'Fn::Equals':
        - ${self:provider.stage}
        - 'prod'

  Resources:
    RagPostgresDbCluster:
      DependsOn: RagPostgresDbSecurityGroup
      DeletionPolicy: Snapshot
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: ${self:provider.environment.RAG_POSTGRES_DB_NAME}
        DBClusterIdentifier: ${self:provider.environment.RAG_POSTGRES_DB_CLUSTER}
        Engine: aurora-postgresql
        EngineVersion: '15.3' # Specify the compatible engine version for Serverless v2
        ServerlessV2ScalingConfiguration: # This is a new property for Serverless v2
          MinCapacity: ${self:provider.environment.MIN_ACU}
          MaxCapacity: ${self:provider.environment.MAX_ACU}
        EnableHttpEndpoint: true
        EnableCloudwatchLogsExports:
          - postgresql
        MasterUsername: ${self:provider.environment.RAG_POSTGRES_DB_USERNAME}
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${RagPostgresDbSecret}:SecretString::}}'
        VpcSecurityGroupIds:
          - !Ref RagPostgresDbSecurityGroup
        DBSubnetGroupName: !Ref RagPostgresDbSubnetGroup
        BackupRetentionPeriod: 7

    RagPostgresDbInstance1:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RagPostgresDbCluster
        
    #Only create the second instance if the stage is prod
    RagPostgresDbInstance2:
      Type: 'AWS::RDS::DBInstance'
      Condition: IsProd
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RagPostgresDbCluster

      

    RagPostgresDbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for RDS Aurora Serverless PostgreSQL Vector Database"
        SubnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}

    RagPostgresDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for RDS Aurora Serverless"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: ${self:provider.environment.VPC_CIDR}
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: '10.2.224.0/20'
    
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for  Lambda Functions"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0  
                 
    RagPostgresDbSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${sls:stage}/rag/postgres/db-creds-2
        Description: "Credentials for Aurora Serverless PostgreSQL Database"
        GenerateSecretString:
          PasswordLength: 16
          ExcludeCharacters: "\"@/\\"  