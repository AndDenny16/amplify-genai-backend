service: data-disclosure

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  pythonRequirements:
    dockerizePip: non-linux

  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

  apiGateway:
      restApiId: ${self:provider.environment.REST_API_ID}
      restApiRootResourceId: ${self:provider.environment.REST_API_ROOT_RESOURCE_ID}

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  stackTags:
    "vu:environment": ${sls:stage}
    "vu:applicationName": "amplify"
    "vu:owner": "amplify@vanderbilt.edu"
  tags:
    "vu:environment": ${sls:stage}
    "vu:applicationName": "amplify"
    "vu:owner": "amplify@vanderbilt.edu"
  environment:
    DATA_DISCLOSURE_VERSIONS_TABLE: ${self:service}-${sls:stage}-versions
    DATA_DISCLOSURE_ACCEPTANCE_TABLE: ${self:service}-${sls:stage}-acceptance
    DATA_DISCLOSURE_STORAGE_BUCKET: ${self:service}-${sls:stage}-storage
    REST_API_ID: ${self:custom.stageVariables.REST_API_ID}
    REST_API_ROOT_RESOURCE_ID: ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID} 


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DATA_DISCLOSURE_VERSIONS_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DATA_DISCLOSURE_VERSIONS_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DATA_DISCLOSURE_ACCEPTANCE_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DATA_DISCLOSURE_ACCEPTANCE_TABLE}/index/*"
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource: 
            - "arn:aws:s3:::${self:provider.environment.DATA_DISCLOSURE_STORAGE_BUCKET}/*"


functions:
  # determine if a user exists as an "accepted" record in the DataDisclosureAcceptanceTable
  check_data_disclosure_decision:
    handler: data_disclosure.check_data_disclosure_decision
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: data-disclosure/check
          method: get
          cors: true

  # save the user's acceptance or denial of the data disclosure in the DataDisclosureAcceptanceTable
  save_data_disclosure_decision:
    handler: data_disclosure.save_data_disclosure_decision
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: data-disclosure/save
          method: post
          cors: true

  # get the most recent data disclosure from DataDisclosureVersionsTable
  get_latest_data_disclosure:
    handler: data_disclosure.get_latest_data_disclosure
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: data-disclosure/latest
          method: get
          cors: true

  # this will only run locally
  # upload the login/user_agreement.md file to the DataDisclosureVersionsTable DynamoDB table and DataDisclosureStorage S3 bucket
  upload_data_disclosure:
    handler: data_disclosure.upload_data_disclosure
    memorySize: 128
    timeout: 30
    events: [] # No associated HTTP events since this function runs locally

resources:
  Resources:
    # contains records of what emails have accepted the data disclosure
    DataDisclosureAcceptanceTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
        TableName: ${self:provider.environment.DATA_DISCLOSURE_ACCEPTANCE_TABLE}

    # contains all information about the data disclosures and their versions
    DataDisclosureVersionsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: version
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: version
            KeyType: RANGE
        TableName: ${self:provider.environment.DATA_DISCLOSURE_VERSIONS_TABLE}

    # contains all versions of the data disclosure
    DataDisclosureStorage:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.DATA_DISCLOSURE_STORAGE_BUCKET}
